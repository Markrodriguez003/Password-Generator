**********************************************************************************************************************
                                                    SCRATCH PAD
**********************************************************************************************************************

PSUEDO-CODE **********************************************************************************************************


..WHEN THE USER SETS OPTIONS AND CLICKS GENERATES PASSWORD
    function optionArr(){
        - push checkbox numbers into array. (If user selects only symbols, that would be arr[0], if user checks
        symbols, numbers and lower that would mean arr[0,1,4], ect
        - call function arrScrambler(arr) randomizes arr values inside // ?
        - call characterGrabber(function arrScrambler(arr) ) <-- passing newly created arry as an arguement
    }
  
    function arrScrambler(){
        - scrambles the arr values inside.
    }

   function characterGrabber(arr){
        -if and else if stmts look into which element is first in the array.
        -random var dependent on length of passed arr as a way of choosing a index num for arr
        - using randomnumber as a index number of the current index of the arr - it parses though array and grabs value 
        - places value into global finalpass var
        - after every pass it will check in a for loop the user choosen max character value for password. If it is below
        it loops (maybe scrambling the array again?)
        - checks to see if there is at least one of each option (only the ones the user picked) is in the final pass arr
   }

   function finalPassRandomizer(arr){   
        - jumbles up the final passphrase;
        - calls displayPassword();
   }
 
 function displayPassword(){
        - display final password into password field for user to copy
 }

 function passCopy(){
        - will check to see if value inside of field is empty, hasn't been run, undefined, ect
        - If it passes it will copy the value into user's clipboard 
 }
 
 
**********************************************************************************************************************

UNUSED-OLD CODE ******************************************************************************************************
 <div
                class="input-group mt-4 justify-content-center col-9 col-xs-8 col-sm-8 col-md-9 col-lg-9 col-xl-9 text-center " >

                <!-- OPTION CHECKBOXES -->
                <div class="input-group-text  p-2 chk-bg-color text-white">
                    <input type="checkbox" label="Checkbox for following text input" class="m-1" id="symsChk">
                    Symbols
                </div>
                <div class="input-group-text chk-bg-color text-white"">
                    <input type="checkbox" label="Checkbox for following text input" class="m-1" id="numsChk">
                    Numbers
                </div>
                <div class="input-group-text chk-bg-color text-white"">
                    <input type="checkbox" label="Checkbox for following text input" class="m-1" id="spacesChk" >
                    Spaces
                </div>
                <div class="input-group-text chk-bg-color text-white"">
                    <input type="checkbox" label="Checkbox for following text input" class="m-1" id="uppersChk">
                    Upper Case
                </div>
                <div class="input-group-text chk-bg-color text-white"">
                    <input type="checkbox" label="Checkbox for following text input" class="m-1" id="lowersChk">
                    Lower Case
                </div>
            </div>

        <!-- BUTTON TO GENERATE RANDOM PASSWORD -->
        <div class="btnContainer mx-auto text-center" id="subBtn">
            <button class="btn-lg">Generate Password</button>
        </div>
    
     <form class="form-inline form-area">
            <input type="text" class="form-control mb-2 p-4" value="Your password will be generated here." col="220" readonly>
                 <!-- Small password copier btn -->
                 <button class="btn-sm" id="copiedPass"><svg class="bi bi-file-earmark-text" width="1em"
                    height="1em" viewBox="0 0 16 16" fill="currentColor" xmlns="http://www.w3.org/2000/svg">
                    <path
                        d="M4 1h5v1H4a1 1 0 00-1 1v10a1 1 0 001 1h8a1 1 0 001-1V6h1v7a2 2 0 01-2 2H4a2 2 0 01-2-2V3a2 2 0 012-2z" />
                    <path d="M9 4.5V1l5 5h-3.5A1.5 1.5 0 019 4.5z" />
                    <path fill-rule="evenodd" d="M5 11.5a.5.5 0 01.5-.5h2a.5.5 0 010 1h-2a.5.5 0 01-.5-.5zm0-2a.5.5 0 01.5-.5h5a.
                5.5 0 010 1h-5a.5.5 0 01-.5-.5zm0-2a.5.5 0 01.5-.5h5a.5.5 0 010 1h-5a.5.5 0 01-.5-.5z"
                        clip-rule="evenodd" />
                </svg></button>
        </form>

**********************************************************************************************************************

SEMI WORKING 


/* PASSWORD PIECES */
var alphaLower = "abcdefghijklmnopqrstuvwxyz";
var alphaUpper = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
var numbers = "0123456789";
var symbols = "!@#$%^&*()_+|}<>?";
var megaArr = [symbols, numbers, alphaUpper, alphaLower];

/* RANDOM NUMBER */
var randoNum;

var scrambledBank = [];

/* GENERATED PASSWORD VAR */
var finalizedPass = [];
var finalPassword;
/* NUMBER OF CHARACTERS USER WOULD LIKE */
var userOptionNum = 5; //DEFAULT


/* ELEMENT GRABBERS */
var sBtn = document.querySelector("#subBtn");             /* Selects Submit Btn */
var pTxtField = document.querySelector("#passTxtField");  /* Selects text area for generated password output */
var copyBtn = document.querySelector("#copiedPass");      /* Selects btn for copying the password to clipboard  */
var symsChktog = document.querySelector("#symsChk")       /* Selects "Symbols" toggle  */
var numsChktog = document.querySelector("#numsChk");      /* Selects "Numbers" toggle  */
var uppersChktog = document.querySelector("#uppersChk");  /* Selects "Uppercase Characters" toggle  */
var lowersChktog = document.querySelector("#lowersChk");  /* Selects "Lowercase Characters" toggle  */


/* WHEN USER CLICKS "Generate Password" BUTTON */
sBtn.addEventListener("click", function (e) {
    pTxtField.placeholder = "";
    togValuesArr();


});

/* PUSHES OPTION TOGGLE VALUES INTO AN ARRAY AND CALLS and SENDS CORRECT ARRAY   */
function togValuesArr() {

    /* USER CHECKBOX CHOICE ARRAY */
    var userChkOptions = [symsChk.checked, numsChktog.checked, uppersChktog.checked, lowersChktog.checked];

    /* CHECK TO SEE IF USER SELECTED NONE OF THE OPTIONS */
    var userError = true;

    /*  for (var c = 0; c < numOfChars; c++) {
 
     } */
    /* WILL CYCLE THROUGH OPTIONS AND CALL FUNCTION TO PUSH RANDOM VALUE INTO FINAL PASS */
    for (var i = 0; i < userChkOptions.length; i++) {
        if (userChkOptions[i] === true) {
            userError = false;
            randomizer(megaArr[i]);
        }
    }
    /* WILL CALL ERROR FUNCTION */
    if (userError === true) {
        console.log("ERROR - Please select an option below before generating password!")
    }
    pushPassToField();

}

var randomizer = (arr) => {

    /* Scrambles array */
    randoNum = Math.floor(Math.random() * arr.length);
   /*  console.log(`Random # choosen | BEFORE: ${randoNum}`); */
    finalizedPass.push(arr[randoNum]);
    /* console.log(`# Going in Array | BEFORE: ${finalizedPass}`); */
    
    /* Creates a bank of extra characters */
    for (var x = 0; x < 10; x++) {
        randoNum = Math.floor(Math.random() * 10);
        scrambledBank.push(arr[randoNum]);
     /*    console.log(`# Going in Bank Array | BEFORE: ${scrambledBank}`); */
    }
    passScrambler(userOptionNum);
}

function passScrambler(userOpNum) {

    for(var y = finalizedPass.length; y < userOpNum; y++ ){
        var r = Math.floor(Math.random() * userOpNum);
        finalizedPass.push(scrambledBank[r]);
        console.log(` Going in Bank Array | AFTER: ${scrambledBank}`);
    }

    var currentIndex = finalizedPass.length
    console.log(`PASSWORD LENGTH: ${finalizedPass.length}`)
    var tmpVal;
    var randoIndex;
    while (0 !== currentIndex) {

        randomIndex = Math.floor(Math.random() * currentIndex);
        currentIndex -= 1;

        temporaryValue = finalizedPass[currentIndex];
        finalizedPass[currentIndex] = finalizedPass[randomIndex];
        finalizedPass[randomIndex] = temporaryValue;
    }
    console.log(`Scrambled Password: ${finalizedPass}`);

}

function pushPassToField() {
    finalPassword = finalizedPass.join("");
    pTxtField.placeholder = finalPassword;


}